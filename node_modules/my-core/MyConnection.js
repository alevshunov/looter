"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mysql = require("mysql");
var MyConnection = /** @class */ (function () {
    function MyConnection(config, logger) {
        this._config = config;
        this._logger = logger;
    }
    MyConnection.prototype.open = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._logger.log('Connection create');
            var connection = mysql.createConnection(_this._config);
            _this._logger.log('Connection connect');
            connection.connect(function (e) {
                if (e) {
                    _this._logger.error(e);
                    _this._logger.error(e.stack);
                    return reject(e);
                }
                _this._connection = connection;
                resolve(_this);
            });
        });
    };
    MyConnection.prototype.query = function (query) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var me = this;
        var promise = new Promise(function (resolve, reject) {
            try {
                var logQuery = query
                    .replace(/\t|\n/g, ' ')
                    .replace(/( +)/g, ' ')
                    .trim();
                _this._logger.log('Query', logQuery, JSON.stringify(args));
                var start_1 = Date.now();
                me._connection.query(query, args, function (err, result) {
                    var elapsed = Date.now() - start_1;
                    if (err) {
                        me._logger.log('Query Error', JSON.stringify(err));
                        return reject(err);
                    }
                    else {
                        if (result.length > 0) {
                            me._logger.log('Query Success', elapsed + " ms", "Fetched " + result.length + " lines.");
                        }
                        else if (result.length === 0) {
                            me._logger.log('Query Success', elapsed + " ms", "Fetched " + result.length + " lines.");
                        }
                        else {
                            me._logger.log('Query Success', elapsed + " ms", "affectedRows: " + result.affectedRows + ", insertId: " + result.insertId + ".");
                        }
                        return resolve(result);
                    }
                });
            }
            catch (e) {
                me._logger.error(e);
                me._logger.error(e.stack);
                reject(e);
            }
        });
        promise.catch(function (e) {
            me._logger.error(JSON.stringify(e));
        });
        return promise;
    };
    MyConnection.prototype.close = function () {
        var me = this;
        me._logger.log('Connection end');
        this._connection.end(function () {
            me._logger.log('Connection destroy');
            me._connection.destroy();
            me._connection = null;
        });
    };
    return MyConnection;
}());
exports.MyConnection = MyConnection;
//# sourceMappingURL=MyConnection.js.map