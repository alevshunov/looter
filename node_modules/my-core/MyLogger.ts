export interface ILogger {
    silence(flag: boolean): void;
    log(...args: any[]): void;
    logForce(...args: any[]): void;
    error(...args: any[]): void;
}

export class MyLogger implements ILogger{
    private _log: boolean = true;

    public silence(flag: boolean) {
        this._log = !flag;
    }

    public log(...args: any[]): void {
        if (!this._log) {
            return;
        }

        console.log.call(console, `[INF] [${new Date()}]:`, args.join(' '));
    }

    public logForce(...args: any[]): void {
        console.log.call(console, `[INF] [${new Date()}]:`, args.join(' '));
    }

    public error(...args: any[]): void {
        console.log.call(console, `[ERR] [${new Date()}]:`, args.join(' '));
    }
}

export class EmptyLogger implements ILogger {
    public silence(flag: boolean) {
    }

    public log(...args: any[]): void {
    }

    public logForce(...args: any[]): void {
    }

    public error(...args: any[]): void {
    }
}